
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000002d4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800076  00800076  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c3  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e8  00000000  00000000  00000d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000503  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002dc  00000000  00000000  00001dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000020db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	c2 c0       	rjmp	.+388    	; 0x188 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ed       	ldi	r30, 0xD4	; 212
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 37       	cpi	r26, 0x7B	; 123
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	22 d0       	rcall	.+68     	; 0x9e <main>
  5a:	3a c1       	rjmp	.+628    	; 0x2d0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PWM_init>:
#include "main.h"

void PWM_init(void)
{
	// TMR0 fast PWM mode
	TCCR0A = _BV(COM0B1) | _BV(WGM01) | _BV(WGM00);
  5e:	83 e2       	ldi	r24, 0x23	; 35
  60:	80 bf       	out	0x30, r24	; 48
	TCCR0B = _BV(CS01);   // clock source = CLK/8, start PWM
  62:	82 e0       	ldi	r24, 0x02	; 2
  64:	83 bf       	out	0x33, r24	; 51
	// PWM out
	DDRD |= _BV(PD5);
  66:	8d 9a       	sbi	0x11, 5	; 17
  68:	08 95       	ret

0000006a <setSpeed>:
#define SPEEDTABLELEN 16

void setSpeed(int chg)
{
	static char speed = 0;
	if (chg) {
  6a:	89 2b       	or	r24, r25
  6c:	41 f0       	breq	.+16     	; 0x7e <setSpeed+0x14>
		if (speed < SPEEDTABLELEN*2-1)
  6e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
  72:	8f 31       	cpi	r24, 0x1F	; 31
  74:	58 f4       	brcc	.+22     	; 0x8c <setSpeed+0x22>
			speed ++;
  76:	8f 5f       	subi	r24, 0xFF	; 255
  78:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
  7c:	07 c0       	rjmp	.+14     	; 0x8c <setSpeed+0x22>
	} else {
		if (speed > 0)
  7e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
  82:	88 23       	and	r24, r24
  84:	19 f0       	breq	.+6      	; 0x8c <setSpeed+0x22>
			speed --;
  86:	81 50       	subi	r24, 0x01	; 1
  88:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	//PORTD &= 0xEF;
	//if (speed > SPEEDTABLELEN/2) {
	//	PORTD |= _BV(PD4);
	//}
	// set PWM
	OCR0B = speedTable[speed>>1];
  8c:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
  90:	e6 95       	lsr	r30
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	ef 59       	subi	r30, 0x9F	; 159
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	80 81       	ld	r24, Z
  9a:	8c bf       	out	0x3c, r24	; 60
  9c:	08 95       	ret

0000009e <main>:
}

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	dd 27       	eor	r29, r29
	int toSleep = 0;
	PWM_init();
  a8:	da df       	rcall	.-76     	; 0x5e <PWM_init>
	RC5_Init();
  aa:	57 d0       	rcall	.+174    	; 0x15a <RC5_Init>

	// analyzer
    DDRD |= _BV(PD0)|_BV(PD1)|_BV(PD4);
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	83 61       	ori	r24, 0x13	; 19
  b0:	81 bb       	out	0x11, r24	; 17

	// TMR1 normal mode
	TCCR1A = 0;
  b2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = _BV(CS12);   // clock source = CLK/256
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	8e bd       	out	0x2e, r24	; 46

	sei();
  b8:	78 94       	sei
	OCR0B = speedTable[speed>>1];
}

int main(void)
{
	int toSleep = 0;
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	10 e0       	ldi	r17, 0x00	; 0
					break;
				default:
					break;
				} 
			}
			toSleep = 0;
  be:	e1 2c       	mov	r14, r1
  c0:	f1 2c       	mov	r15, r1
    while (1) 
    {
		uint16_t command;

        /* Poll for new RC5 command */
        if(RC5_NewCommandReceived(&command))
  c2:	ce 01       	movw	r24, r28
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	52 d0       	rcall	.+164    	; 0x16c <RC5_NewCommandReceived>
  c8:	88 23       	and	r24, r24
  ca:	d9 f0       	breq	.+54     	; 0x102 <__stack+0x23>
        {
            /* Reset RC5 lib so the next command
             * can be decoded. This is a must! */
            RC5_Reset();
  cc:	36 d0       	rcall	.+108    	; 0x13a <RC5_Reset>
			if(RC5_GetStartBits(command) != 3)
  ce:	29 81       	ldd	r18, Y+1	; 0x01
  d0:	3a 81       	ldd	r19, Y+2	; 0x02
  d2:	a9 01       	movw	r20, r18
  d4:	44 27       	eor	r20, r20
  d6:	50 73       	andi	r21, 0x30	; 48
  d8:	41 15       	cp	r20, r1
  da:	50 43       	sbci	r21, 0x30	; 48
  dc:	41 f5       	brne	.+80     	; 0x12e <__stack+0x4f>
			{

			} else {
				uint8_t cmdnum = RC5_GetCommandBits(command);
  de:	2f 73       	andi	r18, 0x3F	; 63
				switch (cmdnum)
  e0:	20 31       	cpi	r18, 0x10	; 16
  e2:	19 f0       	breq	.+6      	; 0xea <__stack+0xb>
  e4:	21 31       	cpi	r18, 0x11	; 17
  e6:	39 f0       	breq	.+14     	; 0xf6 <__stack+0x17>
  e8:	25 c0       	rjmp	.+74     	; 0x134 <__stack+0x55>
				{
				case 16:
					setSpeed(1);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	bd df       	rcall	.-134    	; 0x6a <setSpeed>
					break;
				default:
					break;
				} 
			}
			toSleep = 0;
  f0:	0e 2d       	mov	r16, r14
  f2:	1f 2d       	mov	r17, r15
				uint8_t cmdnum = RC5_GetCommandBits(command);
				switch (cmdnum)
				{
				case 16:
					setSpeed(1);
					break;
  f4:	e6 cf       	rjmp	.-52     	; 0xc2 <main+0x24>
				case 17:
					setSpeed(0);
  f6:	8e 2d       	mov	r24, r14
  f8:	9f 2d       	mov	r25, r15
  fa:	b7 df       	rcall	.-146    	; 0x6a <setSpeed>
					break;
				default:
					break;
				} 
			}
			toSleep = 0;
  fc:	0e 2d       	mov	r16, r14
  fe:	1f 2d       	mov	r17, r15
				case 16:
					setSpeed(1);
					break;
				case 17:
					setSpeed(0);
					break;
 100:	e0 cf       	rjmp	.-64     	; 0xc2 <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f e1       	ldi	r24, 0x1F	; 31
 104:	9e e4       	ldi	r25, 0x4E	; 78
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <__stack+0x27>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__stack+0x2d>
 10c:	00 00       	nop
			}
			toSleep = 0;
		} else {
			_delay_ms(10);
			// counter to sleep
			toSleep ++;
 10e:	0f 5f       	subi	r16, 0xFF	; 255
 110:	1f 4f       	sbci	r17, 0xFF	; 255
			if (toSleep>512) {
 112:	01 30       	cpi	r16, 0x01	; 1
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	19 07       	cpc	r17, r25
 118:	a4 f2       	brlt	.-88     	; 0xc2 <main+0x24>
				set_sleep_mode(SLEEP_MODE_STANDBY);
 11a:	25 b7       	in	r18, 0x35	; 53
 11c:	2f 7a       	andi	r18, 0xAF	; 175
 11e:	20 64       	ori	r18, 0x40	; 64
 120:	25 bf       	out	0x35, r18	; 53
				sleep_enable();
 122:	25 b7       	in	r18, 0x35	; 53
 124:	20 62       	ori	r18, 0x20	; 32
 126:	25 bf       	out	0x35, r18	; 53
				sei();
 128:	78 94       	sei
				sleep_cpu(); 
 12a:	88 95       	sleep
 12c:	ca cf       	rjmp	.-108    	; 0xc2 <main+0x24>
					break;
				default:
					break;
				} 
			}
			toSleep = 0;
 12e:	0e 2d       	mov	r16, r14
 130:	1f 2d       	mov	r17, r15
 132:	c7 cf       	rjmp	.-114    	; 0xc2 <main+0x24>
 134:	0e 2d       	mov	r16, r14
 136:	1f 2d       	mov	r17, r15
				sleep_enable();
				sei();
				sleep_cpu(); 
			}
		}		
    }
 138:	c4 cf       	rjmp	.-120    	; 0xc2 <main+0x24>

0000013a <RC5_Reset>:
}


void RC5_Reset()
{
    has_new = 0;
 13a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <has_new>
    ccounter = 14;
 13e:	8e e0       	ldi	r24, 0x0E	; 14
 140:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ccounter>
    command = 0;
 144:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <command+0x1>
 148:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <command>
    state = STATE_BEGIN;
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    
    /* Enable INT0 */
    GIMSK |= _BV(INT0);
 152:	8b b7       	in	r24, 0x3b	; 59
 154:	80 64       	ori	r24, 0x40	; 64
 156:	8b bf       	out	0x3b, r24	; 59
 158:	08 95       	ret

0000015a <RC5_Init>:
State state = STATE_BEGIN;

void RC5_Init()
{
    /* Set INT0 to trigger on any edge */
    MCUCR |= _BV(ISC00);
 15a:	85 b7       	in	r24, 0x35	; 53
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	85 bf       	out	0x35, r24	; 53
    /* Set PD2 to input */
    DDRD &= ~_BV(PD2);
 160:	8a 98       	cbi	0x11, 2	; 17
    
    /* Reset Timer1 Counter */
    TCCR1A = 0;
 162:	1f bc       	out	0x2f, r1	; 47
    /* Enable Timer1 in normal mode with /64 clock prescaling */
    /* One tick is 32us with 8MHz clock */
    TCCR1B = _BV(CS11)|_BV(CS10);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	8e bd       	out	0x2e, r24	; 46

    RC5_Reset();
 168:	e8 df       	rcall	.-48     	; 0x13a <RC5_Reset>
 16a:	08 95       	ret

0000016c <RC5_NewCommandReceived>:
    GIMSK |= _BV(INT0);
}


uint8_t RC5_NewCommandReceived(uint16_t *new_command) 
{ 
 16c:	fc 01       	movw	r30, r24
    if(has_new) 
 16e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <has_new>
 172:	99 23       	and	r25, r25
 174:	31 f0       	breq	.+12     	; 0x182 <RC5_NewCommandReceived+0x16>
    { 
        *new_command = command; 
 176:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <command>
 17a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <command+0x1>
 17e:	91 83       	std	Z+1, r25	; 0x01
 180:	80 83       	st	Z, r24
    } 
    
    return has_new; 
 182:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <has_new>
}
 186:	08 95       	ret

00000188 <__vector_1>:

ISR(INT0_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	cf 93       	push	r28
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
    uint16_t delay = TCNT1;
 1ac:	8c b5       	in	r24, 0x2c	; 44
 1ae:	9d b5       	in	r25, 0x2d	; 45
     *  0 - short space
     *  2 - short pulse
     *  4 - long space
     *  6 - long pulse
     */
    uint8_t event = (PIND & _BV(PIND2)) ? 2 : 0;
 1b0:	82 99       	sbic	0x10, 2	; 16
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <__vector_1+0x30>
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <__vector_1+0x32>
 1b8:	c2 e0       	ldi	r28, 0x02	; 2
    
    if(delay > LONG_MIN && delay < LONG_MAX)
 1ba:	9c 01       	movw	r18, r24
 1bc:	2c 52       	subi	r18, 0x2C	; 44
 1be:	31 09       	sbc	r19, r1
 1c0:	2a 31       	cpi	r18, 0x1A	; 26
 1c2:	31 05       	cpc	r19, r1
 1c4:	10 f4       	brcc	.+4      	; 0x1ca <__vector_1+0x42>
    {
        event += 4;
 1c6:	cc 5f       	subi	r28, 0xFC	; 252
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <__vector_1+0x4a>
    }
    else if(delay < SHORT_MIN || delay > SHORT_MAX)
 1ca:	0e 97       	sbiw	r24, 0x0e	; 14
 1cc:	4d 97       	sbiw	r24, 0x1d	; 29
 1ce:	08 f0       	brcs	.+2      	; 0x1d2 <__vector_1+0x4a>
    {
        /* If delay wasn't long and isn't short then
         * it is erroneous so we need to reset but
         * we don't return from interrupt so we don't
         * loose the edge currently detected. */
        RC5_Reset();
 1d0:	b4 df       	rcall	.-152    	; 0x13a <RC5_Reset>
    }

    if(state == STATE_BEGIN)
 1d2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 1d6:	25 30       	cpi	r18, 0x05	; 5
 1d8:	f1 f4       	brne	.+60     	; 0x216 <__vector_1+0x8e>
    {
        ccounter--;
 1da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ccounter>
 1de:	81 50       	subi	r24, 0x01	; 1
 1e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ccounter>
        command |= 1 << ccounter;
 1e4:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <command>
 1e8:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <command+0x1>
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	ba 01       	movw	r22, r20
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__vector_1+0x70>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <__vector_1+0x6c>
 1fc:	cb 01       	movw	r24, r22
 1fe:	82 2b       	or	r24, r18
 200:	93 2b       	or	r25, r19
 202:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <command+0x1>
 206:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <command>
        state = STATE_MID1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        TCNT1 = 0;
 210:	1d bc       	out	0x2d, r1	; 45
 212:	1c bc       	out	0x2c, r1	; 44
        return;
 214:	4b c0       	rjmp	.+150    	; 0x2ac <__vector_1+0x124>
    }
    
    State newstate = (trans[state] >> event) & 0x03;
 216:	e2 2f       	mov	r30, r18
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ef 58       	subi	r30, 0x8F	; 143
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <__vector_1+0xa0>
 224:	95 95       	asr	r25
 226:	87 95       	ror	r24
 228:	ca 95       	dec	r28
 22a:	e2 f7       	brpl	.-8      	; 0x224 <__vector_1+0x9c>
 22c:	38 2f       	mov	r19, r24
 22e:	33 70       	andi	r19, 0x03	; 3

    if(newstate == state || state > STATE_START0)
 230:	23 17       	cp	r18, r19
 232:	11 f0       	breq	.+4      	; 0x238 <__vector_1+0xb0>
 234:	24 30       	cpi	r18, 0x04	; 4
 236:	10 f0       	brcs	.+4      	; 0x23c <__vector_1+0xb4>
    {
        /* No state change or wrong state means
         * error so reset. */
        RC5_Reset();
 238:	80 df       	rcall	.-256    	; 0x13a <RC5_Reset>
        return;
 23a:	38 c0       	rjmp	.+112    	; 0x2ac <__vector_1+0x124>
    }
    
    state = newstate;
 23c:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__data_start>
    
    /* Emit 0 - jest decrement bit position counter
     * cause data is already zeroed by default. */
    if(state == STATE_MID0)
 240:	32 30       	cpi	r19, 0x02	; 2
 242:	41 f4       	brne	.+16     	; 0x254 <__vector_1+0xcc>
    {
        ccounter--;
 244:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ccounter>
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ccounter>
    }
    
    /* The only valid end states are MID0 and START1.
     * Mid0 is ok, but if we finish in MID1 we need to wait
     * for START1 so the last edge is consumed. */
    if(ccounter == 0 && (state == STATE_START1 || state == STATE_MID0))
 24e:	88 23       	and	r24, r24
 250:	11 f1       	breq	.+68     	; 0x296 <__vector_1+0x10e>
 252:	2a c0       	rjmp	.+84     	; 0x2a8 <__vector_1+0x120>
     * cause data is already zeroed by default. */
    if(state == STATE_MID0)
    {
        ccounter--;
    }
    else if(state == STATE_MID1)
 254:	31 30       	cpi	r19, 0x01	; 1
 256:	c9 f4       	brne	.+50     	; 0x28a <__vector_1+0x102>
    {
        /* Emit 1 */
        ccounter--;
 258:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ccounter>
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ccounter>
        command |= 1 << ccounter;
 262:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <command>
 266:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <command+0x1>
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	ba 01       	movw	r22, r20
 270:	02 c0       	rjmp	.+4      	; 0x276 <__vector_1+0xee>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	8a 95       	dec	r24
 278:	e2 f7       	brpl	.-8      	; 0x272 <__vector_1+0xea>
 27a:	cb 01       	movw	r24, r22
 27c:	82 2b       	or	r24, r18
 27e:	93 2b       	or	r25, r19
 280:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <command+0x1>
 284:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <command>
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <__vector_1+0x120>
    }
    
    /* The only valid end states are MID0 and START1.
     * Mid0 is ok, but if we finish in MID1 we need to wait
     * for START1 so the last edge is consumed. */
    if(ccounter == 0 && (state == STATE_START1 || state == STATE_MID0))
 28a:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <ccounter>
 28e:	21 11       	cpse	r18, r1
 290:	0b c0       	rjmp	.+22     	; 0x2a8 <__vector_1+0x120>
 292:	80 fd       	sbrc	r24, 0
 294:	09 c0       	rjmp	.+18     	; 0x2a8 <__vector_1+0x120>
    {
        state = STATE_END;
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        has_new = 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <has_new>
        
        /* Disable INT0 */
        GIMSK &= ~_BV(INT0);
 2a2:	8b b7       	in	r24, 0x3b	; 59
 2a4:	8f 7b       	andi	r24, 0xBF	; 191
 2a6:	8b bf       	out	0x3b, r24	; 59
    }
    
    TCNT1 = 0;
 2a8:	1d bc       	out	0x2d, r1	; 45
 2aa:	1c bc       	out	0x2c, r1	; 44
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	cf 91       	pop	r28
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
